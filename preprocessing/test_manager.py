import unittest

import numpy as np
from tensorflow.keras.layers import Masking

from preprocessing import masking
from preprocessing.manager import Manager


class TestManager(unittest.TestCase):
    def test_manager(self):
        mock_testdata = \
            [
                [
                    [[10.0, 10.0, 0.2], [20.0, 10.0, 0.2], [30.0, 10.0, 0.2], [40.0, 10.0, 0.2]],  # 1fr, A
                    [[10.0, 20.0, 0.2], [20.0, 20.0, 0.2], [30.0, 20.0, 0.2], [40.0, 20.0, 0.2]],  # 2fr, A
                    [[10.0, 30.0, 0.2], [20.0, 30.0, 0.2], [30.0, 30.0, 0.2], [40.0, 30.0, 0.2]],  # 3fr, A
                    [[10.0, 40.0, 0.2], [20.0, 40.0, 0.2], [30.0, 40.0, 0.2], [40.0, 40.0, 0.2]],  # 4fr, A
                ],
                [
                    [[10.0, 40.0, 0.2], [20.0, 40.0, 0.2], [30.0, 40.0, 0.2], [40.0, 40.0, 0.2]],  # 1fr, A
                    [[10.0, 50.0, 0.2], [20.0, 50.0, 0.2], [30.0, 50.0, 0.2], [40.0, 50.0, 0.2]],  # 2fr, A
                    [[10.0, 60.0, 0.2], [20.0, 60.0, 0.2], [30.0, 60.0, 0.2], [40.0, 60.0, 0.2]],  # 3fr, A
                    [[10.0, 70.0, 0.2], [20.0, 70.0, 0.2], [30.0, 70.0, 0.2], [40.0, 70.0, 0.2]],  # 4fr, A
                    [[10.0, 80.0, 0.2], [20.0, 80.0, 0.2], [30.0, 80.0, 0.2], [40.0, 80.0, 0.2]],  # 4fr, A
                ],
                [
                    [[40.0, 10.0, 0.2], [50.0, 10.0, 0.2], [60.0, 10.0, 0.2], [60.0, 10.0, 0.2]],  # 1fr, A
                    [[40.0, 20.0, 0.2], [50.0, 20.0, 0.2], [60.0, 20.0, 0.2], [60.0, 20.0, 0.2]],  # 2fr, A
                    [[40.0, 30.0, 0.2], [50.0, 30.0, 0.2], [60.0, 30.0, 0.2], [60.0, 30.0, 0.2]],  # 3fr, A
                ],
                [
                    [[20.0, 20.0, 0.2], [30.0, 20.0, 0.2], [40.0, 20.0, 0.2], [50.0, 20.0, 0.2]],  # 1fr, A
                    [[20.0, 30.0, 0.2], [30.0, 30.0, 0.2], [40.0, 30.0, 0.2], [50.0, 30.0, 0.2]],  # 2fr, A
                    [[20.0, 40.0, 0.2], [30.0, 40.0, 0.2], [40.0, 40.0, 0.2], [50.0, 40.0, 0.2]],  # 3fr, A
                ],
                #
                [
                    [[10.0, 40.0, 0.2], [20.0, 40.0, 0.2], [30.0, 40.0, 0.2], [40.0, 40.0, 0.2]],  # 4fr, A
                    [[10.0, 30.0, 0.2], [20.0, 30.0, 0.2], [30.0, 30.0, 0.2], [40.0, 30.0, 0.2]],  # 3fr, A
                    [[10.0, 20.0, 0.2], [20.0, 20.0, 0.2], [30.0, 20.0, 0.2], [40.0, 20.0, 0.2]],  # 2fr, A
                    [[10.0, 10.0, 0.2], [20.0, 10.0, 0.2], [30.0, 10.0, 0.2], [40.0, 10.0, 0.2]],  # 1fr, A
                ],
                [
                    [[10.0, 80.0, 0.2], [20.0, 80.0, 0.2], [30.0, 80.0, 0.2], [40.0, 80.0, 0.2]],  # 4fr, A
                    [[10.0, 70.0, 0.2], [20.0, 70.0, 0.2], [30.0, 70.0, 0.2], [40.0, 70.0, 0.2]],  # 4fr, A
                    [[10.0, 60.0, 0.2], [20.0, 60.0, 0.2], [30.0, 60.0, 0.2], [40.0, 60.0, 0.2]],  # 3fr, A
                    [[10.0, 50.0, 0.2], [20.0, 50.0, 0.2], [30.0, 50.0, 0.2], [40.0, 50.0, 0.2]],  # 2fr, A
                    [[10.0, 40.0, 0.2], [20.0, 40.0, 0.2], [30.0, 40.0, 0.2], [40.0, 40.0, 0.2]],  # 1fr, A
                ],
                [
                    [[40.0, 30.0, 0.2], [50.0, 30.0, 0.2], [60.0, 30.0, 0.2], [60.0, 30.0, 0.2]],  # 3fr, A
                    [[40.0, 20.0, 0.2], [50.0, 20.0, 0.2], [60.0, 20.0, 0.2], [60.0, 20.0, 0.2]],  # 2fr, A
                    [[40.0, 10.0, 0.2], [50.0, 10.0, 0.2], [60.0, 10.0, 0.2], [60.0, 10.0, 0.2]],  # 1fr, A
                ],
                [
                    [[20.0, 40.0, 0.2], [30.0, 40.0, 0.2], [40.0, 40.0, 0.2], [50.0, 40.0, 0.2]],  # 3fr, A
                    [[20.0, 30.0, 0.2], [30.0, 30.0, 0.2], [40.0, 30.0, 0.2], [50.0, 30.0, 0.2]],  # 2fr, A
                    [[20.0, 20.0, 0.2], [30.0, 20.0, 0.2], [40.0, 20.0, 0.2], [50.0, 20.0, 0.2]],  # 1fr, A
                ]
            ]

        mock_answers = [0, 0, 0, 0, 1, 1, 1, 1]

        padded_data = masking.history_add_padding(mock_testdata)

        manager = Manager(np.array(padded_data.data), np.array(mock_answers))
        manager.generate_model()

        self.assertEqual(True, False)  # add assertion here


if __name__ == '__main__':
    unittest.main()
